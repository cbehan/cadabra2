
def test01():
    __cdbkernel__=create_scope()
    {a,b,c,d}::Indices(type1);
    {m,n,p,q}::Indices(type2);
    A::ImplicitIndex(A_{m n});
    C::ImplicitIndex(C_{m n});
    D::ImplicitIndex(D_{a b});
    ex:= D C A D;
    sort_product(_)
    tst:= C A D D - @(ex);
    assert(tst==0)
    print("Test 01 passed")

test01()

def test02():
    __cdbkernel__=create_scope()
    {a,b,c,d}::Indices(spinor);
    Tr{#}::Trace(indices=spinor);
    A::ImplicitIndex(A_{a b});
    B::ImplicitIndex(B_{a b});    
    ex:= Tr( A B A C B ) - Tr( C );
    untrace(_);
    tst:= C Tr( A B A B ) - C Tr(1) - @(ex);
    assert(tst==0)
    print("Test 02 passed")

test02()
        
def test03():
    __cdbkernel__=create_scope()
    {a,b,c,d}::Indices(spinor);
    \sigma^{\mu}::ImplicitIndex(\sigma^{\mu a}_{b});    
    Tr{#}::Trace(indices=spinor);
    ex:= Tr( \sigma^{\mu} q \sigma^{\nu} );
    untrace(_);
    tst:= q Tr( \sigma^{\mu} \sigma^{\nu} ) - @(ex);
    assert(tst==0)
    print("Test 03 passed")
    
test03()
        
def test04():
    __cdbkernel__=create_scope()
    {a,b,c,d}::Indices(spinor);
    Tr{#}::Trace(indices=spinor);
    ex:=Tr( V^{m} ) + W^{m};
    print("Test 04 passed")

test04()
        
def test05():
    __cdbkernel__=create_scope()
    {a,b,c,d}::Indices(vector);
    ex:=(A)_{a b} (B)_{b c} (C)_{c d};
    combine(_);
    tst:= (A B C)_{a d} - @(ex);
    assert(tst==0)
    print("Test 05 passed")

test05()

def test06():
    __cdbkernel__=create_scope()
    {a,b}::Indices(vector);
    ex:=(A)_{a b} (B)_{b a};
    combine(_);
    tst:= (A B)_{b b} - @(ex);
    assert(tst==0)
    print("Test 06 passed")

test06()

